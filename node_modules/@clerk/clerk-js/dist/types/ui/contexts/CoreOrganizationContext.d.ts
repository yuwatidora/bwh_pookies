/// <reference types="react" />
export declare const CoreOrganizationProvider: ({ children, organization, lastOrganizationMember, lastOrganizationInvitation, swrConfig, }: import("react").PropsWithChildren<{
    organization: import("@clerk/types").OrganizationResource | null | undefined;
    lastOrganizationInvitation: import("@clerk/types").OrganizationInvitationResource | null | undefined;
    lastOrganizationMember: import("@clerk/types").OrganizationMembershipResource | null | undefined;
} & {
    swrConfig?: any;
}>) => import("react").JSX.Element;
export declare const useCoreOrganization: <T extends {
    invitationList?: import("@clerk/types").ClerkPaginationParams | undefined;
    membershipList?: import("@clerk/types").GetMembershipsParams | undefined;
    domains?: true | (import("@clerk/types").GetDomainsParams & {
        infinite?: boolean | undefined;
        keepPreviousData?: boolean | undefined;
    }) | undefined;
    membershipRequests?: true | (import("@clerk/types").GetMembershipRequestParams & {
        infinite?: boolean | undefined;
        keepPreviousData?: boolean | undefined;
    }) | undefined;
    memberships?: true | (import("@clerk/types").GetMembersParams & {
        infinite?: boolean | undefined;
        keepPreviousData?: boolean | undefined;
    }) | undefined;
    invitations?: true | (import("@clerk/types").GetInvitationsParams & {
        infinite?: boolean | undefined;
        keepPreviousData?: boolean | undefined;
    }) | undefined;
}>(params?: T | undefined) => {
    isLoaded: false;
    organization: undefined;
    invitationList: undefined;
    membershipList: undefined;
    membership: undefined;
    domains: {
        data: undefined;
        count: undefined;
        isLoading: false;
        isFetching: false;
        isError: false;
        page: undefined;
        pageCount: undefined;
        fetchPage: undefined;
        fetchPrevious: undefined;
        fetchNext: undefined;
        hasNextPage: false;
        hasPreviousPage: false;
        revalidate: undefined;
        setData: undefined;
    };
    membershipRequests: {
        data: undefined;
        count: undefined;
        isLoading: false;
        isFetching: false;
        isError: false;
        page: undefined;
        pageCount: undefined;
        fetchPage: undefined;
        fetchPrevious: undefined;
        fetchNext: undefined;
        hasNextPage: false;
        hasPreviousPage: false;
        revalidate: undefined;
        setData: undefined;
    };
    memberships: {
        data: undefined;
        count: undefined;
        isLoading: false;
        isFetching: false;
        isError: false;
        page: undefined;
        pageCount: undefined;
        fetchPage: undefined;
        fetchPrevious: undefined;
        fetchNext: undefined;
        hasNextPage: false;
        hasPreviousPage: false;
        revalidate: undefined;
        setData: undefined;
    };
    invitations: {
        data: undefined;
        count: undefined;
        isLoading: false;
        isFetching: false;
        isError: false;
        page: undefined;
        pageCount: undefined;
        fetchPage: undefined;
        fetchPrevious: undefined;
        fetchNext: undefined;
        hasNextPage: false;
        hasPreviousPage: false;
        revalidate: undefined;
        setData: undefined;
    };
} | {
    isLoaded: true;
    organization: import("@clerk/types").OrganizationResource;
    invitationList: undefined;
    membershipList: undefined;
    membership: undefined;
    domains: {
        data: undefined;
        count: undefined;
        isLoading: false;
        isFetching: false;
        isError: false;
        page: undefined;
        pageCount: undefined;
        fetchPage: undefined;
        fetchPrevious: undefined;
        fetchNext: undefined;
        hasNextPage: false;
        hasPreviousPage: false;
        revalidate: undefined;
        setData: undefined;
    };
    membershipRequests: {
        data: undefined;
        count: undefined;
        isLoading: false;
        isFetching: false;
        isError: false;
        page: undefined;
        pageCount: undefined;
        fetchPage: undefined;
        fetchPrevious: undefined;
        fetchNext: undefined;
        hasNextPage: false;
        hasPreviousPage: false;
        revalidate: undefined;
        setData: undefined;
    };
    memberships: {
        data: undefined;
        count: undefined;
        isLoading: false;
        isFetching: false;
        isError: false;
        page: undefined;
        pageCount: undefined;
        fetchPage: undefined;
        fetchPrevious: undefined;
        fetchNext: undefined;
        hasNextPage: false;
        hasPreviousPage: false;
        revalidate: undefined;
        setData: undefined;
    };
    invitations: {
        data: undefined;
        count: undefined;
        isLoading: false;
        isFetching: false;
        isError: false;
        page: undefined;
        pageCount: undefined;
        fetchPage: undefined;
        fetchPrevious: undefined;
        fetchNext: undefined;
        hasNextPage: false;
        hasPreviousPage: false;
        revalidate: undefined;
        setData: undefined;
    };
} | {
    isLoaded: boolean;
    organization: import("@clerk/types").OrganizationResource | null;
    invitationList: import("@clerk/types").OrganizationInvitationResource[] | null | undefined;
    membershipList: import("@clerk/types").OrganizationMembershipResource[] | null | undefined;
    membership: import("@clerk/types").OrganizationMembershipResource | null | undefined;
    domains: {
        data: import("@clerk/types").OrganizationDomainResource[];
        count: number;
        isLoading: boolean;
        isFetching: boolean;
        isError: boolean;
        page: number;
        pageCount: number;
        fetchPage: (size: number | ((_size: number) => number)) => void;
        fetchPrevious: () => void;
        fetchNext: () => void;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        revalidate: () => Promise<void>;
        setData: (T["membershipRequests"] extends {
            infinite: true;
        } ? true : false) extends infer T_1 ? T_1 extends (T["membershipRequests"] extends {
            infinite: true;
        } ? true : false) ? T_1 extends true ? (data?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationDomainResource> | undefined)[] | ((currentData?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationDomainResource> | undefined)[] | undefined) => (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationDomainResource> | undefined)[] | Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationDomainResource> | undefined)[] | undefined> | undefined) | undefined) => Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationDomainResource> | undefined)[] | undefined> : (data?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationDomainResource> | ((currentData?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationDomainResource> | undefined) => import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationDomainResource> | Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationDomainResource> | undefined> | undefined) | undefined) => Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationDomainResource> | undefined> : never : never;
    } | null;
    membershipRequests: {
        data: import("@clerk/types").OrganizationMembershipRequestResource[];
        count: number;
        isLoading: boolean;
        isFetching: boolean;
        isError: boolean;
        page: number;
        pageCount: number;
        fetchPage: (size: number | ((_size: number) => number)) => void;
        fetchPrevious: () => void;
        fetchNext: () => void;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        revalidate: () => Promise<void>;
        setData: (T["membershipRequests"] extends {
            infinite: true;
        } ? true : false) extends infer T_2 ? T_2 extends (T["membershipRequests"] extends {
            infinite: true;
        } ? true : false) ? T_2 extends true ? (data?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipRequestResource> | undefined)[] | ((currentData?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipRequestResource> | undefined)[] | undefined) => (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipRequestResource> | undefined)[] | Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipRequestResource> | undefined)[] | undefined> | undefined) | undefined) => Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipRequestResource> | undefined)[] | undefined> : (data?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipRequestResource> | ((currentData?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipRequestResource> | undefined) => import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipRequestResource> | Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipRequestResource> | undefined> | undefined) | undefined) => Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipRequestResource> | undefined> : never : never;
    } | null;
    memberships: {
        data: import("@clerk/types").OrganizationMembershipResource[];
        count: number;
        isLoading: boolean;
        isFetching: boolean;
        isError: boolean;
        page: number;
        pageCount: number;
        fetchPage: (size: number | ((_size: number) => number)) => void;
        fetchPrevious: () => void;
        fetchNext: () => void;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        revalidate: () => Promise<void>;
        setData: (T["memberships"] extends {
            infinite: true;
        } ? true : false) extends infer T_3 ? T_3 extends (T["memberships"] extends {
            infinite: true;
        } ? true : false) ? T_3 extends true ? (data?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined)[] | ((currentData?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined)[] | undefined) => (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined)[] | Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined)[] | undefined> | undefined) | undefined) => Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined)[] | undefined> : (data?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | ((currentData?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined) => import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined> | undefined) | undefined) => Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined> : never : never;
    } | null;
    invitations: {
        data: import("@clerk/types").OrganizationInvitationResource[];
        count: number;
        isLoading: boolean;
        isFetching: boolean;
        isError: boolean;
        page: number;
        pageCount: number;
        fetchPage: (size: number | ((_size: number) => number)) => void;
        fetchPrevious: () => void;
        fetchNext: () => void;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        revalidate: () => Promise<void>;
        setData: (T["invitations"] extends {
            infinite: true;
        } ? true : false) extends infer T_4 ? T_4 extends (T["invitations"] extends {
            infinite: true;
        } ? true : false) ? T_4 extends true ? (data?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationInvitationResource> | undefined)[] | ((currentData?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationInvitationResource> | undefined)[] | undefined) => (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationInvitationResource> | undefined)[] | Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationInvitationResource> | undefined)[] | undefined> | undefined) | undefined) => Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationInvitationResource> | undefined)[] | undefined> : (data?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationInvitationResource> | ((currentData?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationInvitationResource> | undefined) => import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationInvitationResource> | Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationInvitationResource> | undefined> | undefined) | undefined) => Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationInvitationResource> | undefined> : never : never;
    } | null;
};
export declare const useCoreOrganizationList: <T extends {
    userMemberships?: true | (import("@clerk/types").GetUserOrganizationMembershipParams & {
        infinite?: boolean | undefined;
        keepPreviousData?: boolean | undefined;
    }) | undefined;
    userInvitations?: true | (import("@clerk/types").GetUserOrganizationInvitationsParams & {
        infinite?: boolean | undefined;
        keepPreviousData?: boolean | undefined;
    }) | undefined;
    userSuggestions?: true | (import("@clerk/types").GetUserOrganizationSuggestionsParams & {
        infinite?: boolean | undefined;
        keepPreviousData?: boolean | undefined;
    }) | undefined;
}>(params?: T | undefined) => {
    isLoaded: false;
    organizationList: undefined;
    createOrganization: undefined;
    setActive: undefined;
    userMemberships: {
        data: undefined;
        count: undefined;
        isLoading: false;
        isFetching: false;
        isError: false;
        page: undefined;
        pageCount: undefined;
        fetchPage: undefined;
        fetchPrevious: undefined;
        fetchNext: undefined;
        hasNextPage: false;
        hasPreviousPage: false;
        revalidate: undefined;
        setData: undefined;
    };
    userInvitations: {
        data: undefined;
        count: undefined;
        isLoading: false;
        isFetching: false;
        isError: false;
        page: undefined;
        pageCount: undefined;
        fetchPage: undefined;
        fetchPrevious: undefined;
        fetchNext: undefined;
        hasNextPage: false;
        hasPreviousPage: false;
        revalidate: undefined;
        setData: undefined;
    };
    userSuggestions: {
        data: undefined;
        count: undefined;
        isLoading: false;
        isFetching: false;
        isError: false;
        page: undefined;
        pageCount: undefined;
        fetchPage: undefined;
        fetchPrevious: undefined;
        fetchNext: undefined;
        hasNextPage: false;
        hasPreviousPage: false;
        revalidate: undefined;
        setData: undefined;
    };
} | {
    isLoaded: boolean;
    organizationList: {
        membership: import("@clerk/types").OrganizationMembershipResource;
        organization: import("@clerk/types").OrganizationResource;
    }[];
    createOrganization: (params: import("@clerk/types").CreateOrganizationParams) => Promise<import("@clerk/types").OrganizationResource>;
    setActive: import("@clerk/types").SetActive;
    userMemberships: {
        data: import("@clerk/types").OrganizationMembershipResource[];
        count: number;
        isLoading: boolean;
        isFetching: boolean;
        isError: boolean;
        page: number;
        pageCount: number;
        fetchPage: (size: number | ((_size: number) => number)) => void;
        fetchPrevious: () => void;
        fetchNext: () => void;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        revalidate: () => Promise<void>;
        setData: (T["userMemberships"] extends {
            infinite: true;
        } ? true : false) extends infer T_1 ? T_1 extends (T["userMemberships"] extends {
            infinite: true;
        } ? true : false) ? T_1 extends true ? (data?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined)[] | ((currentData?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined)[] | undefined) => (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined)[] | Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined)[] | undefined> | undefined) | undefined) => Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined)[] | undefined> : (data?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | ((currentData?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined) => import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined> | undefined) | undefined) => Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationMembershipResource> | undefined> : never : never;
    };
    userInvitations: {
        data: import("@clerk/types").UserOrganizationInvitationResource[];
        count: number;
        isLoading: boolean;
        isFetching: boolean;
        isError: boolean;
        page: number;
        pageCount: number;
        fetchPage: (size: number | ((_size: number) => number)) => void;
        fetchPrevious: () => void;
        fetchNext: () => void;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        revalidate: () => Promise<void>;
        setData: (T["userInvitations"] extends {
            infinite: true;
        } ? true : false) extends infer T_2 ? T_2 extends (T["userInvitations"] extends {
            infinite: true;
        } ? true : false) ? T_2 extends true ? (data?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").UserOrganizationInvitationResource> | undefined)[] | ((currentData?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").UserOrganizationInvitationResource> | undefined)[] | undefined) => (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").UserOrganizationInvitationResource> | undefined)[] | Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").UserOrganizationInvitationResource> | undefined)[] | undefined> | undefined) | undefined) => Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").UserOrganizationInvitationResource> | undefined)[] | undefined> : (data?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").UserOrganizationInvitationResource> | ((currentData?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").UserOrganizationInvitationResource> | undefined) => import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").UserOrganizationInvitationResource> | Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").UserOrganizationInvitationResource> | undefined> | undefined) | undefined) => Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").UserOrganizationInvitationResource> | undefined> : never : never;
    };
    userSuggestions: {
        data: import("@clerk/types").OrganizationSuggestionResource[];
        count: number;
        isLoading: boolean;
        isFetching: boolean;
        isError: boolean;
        page: number;
        pageCount: number;
        fetchPage: (size: number | ((_size: number) => number)) => void;
        fetchPrevious: () => void;
        fetchNext: () => void;
        hasNextPage: boolean;
        hasPreviousPage: boolean;
        revalidate: () => Promise<void>;
        setData: (T["userSuggestions"] extends {
            infinite: true;
        } ? true : false) extends infer T_3 ? T_3 extends (T["userSuggestions"] extends {
            infinite: true;
        } ? true : false) ? T_3 extends true ? (data?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationSuggestionResource> | undefined)[] | ((currentData?: (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationSuggestionResource> | undefined)[] | undefined) => (import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationSuggestionResource> | undefined)[] | Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationSuggestionResource> | undefined)[] | undefined> | undefined) | undefined) => Promise<(import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationSuggestionResource> | undefined)[] | undefined> : (data?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationSuggestionResource> | ((currentData?: import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationSuggestionResource> | undefined) => import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationSuggestionResource> | Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationSuggestionResource> | undefined> | undefined) | undefined) => Promise<import("@clerk/types").ClerkPaginatedResponse<import("@clerk/types").OrganizationSuggestionResource> | undefined> : never : never;
    };
};
export declare const useCoreOrganizations: () => {
    isLoaded: false;
    createOrganization: undefined;
    getOrganizationMemberships: undefined;
    getOrganization: undefined;
} | {
    isLoaded: true;
    createOrganization: (params: import("@clerk/types").CreateOrganizationParams) => Promise<import("@clerk/types").OrganizationResource>;
    getOrganizationMemberships: () => Promise<import("@clerk/types").OrganizationMembershipResource[]>;
    getOrganization: (organizationId: string) => Promise<import("@clerk/types").OrganizationResource | undefined>;
};
