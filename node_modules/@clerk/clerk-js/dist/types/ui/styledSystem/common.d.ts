import type { InternalTheme } from './types';
export declare const common: {
    textVariants: (t: InternalTheme) => {
        readonly headingRegularRegular: {
            readonly fontSize: "1rem";
            readonly fontWeight: 400;
            readonly lineHeight: 1.25;
            readonly WebkitFontSmoothing: "auto !important";
            readonly fontFamily: string;
        };
        readonly buttonExtraSmallBold: {
            readonly fontWeight: 600;
            readonly textTransform: "uppercase";
            readonly fontFamily: "inherit";
            readonly fontSize: "0.6875rem";
            readonly letterSpacing: "0";
            readonly lineHeight: 1;
            readonly WebkitFontSmoothing: "auto !important";
        };
        readonly buttonSmallRegular: {
            fontFamily: "inherit";
            fontWeight: 400;
            fontSize: "0.8125rem";
            lineHeight: 1.25;
            WebkitFontSmoothing: "auto !important";
        };
        readonly buttonRegularRegular: {
            fontFamily: "inherit";
            lineHeight: 1;
            fontWeight: 400;
            fontSize: "0.875rem";
            WebkitFontSmoothing: "auto !important";
        };
        readonly buttonRegularMedium: {
            fontFamily: "inherit";
            lineHeight: 1;
            fontWeight: 500;
            fontSize: "0.875rem";
            WebkitFontSmoothing: "auto !important";
        };
        readonly extraSmallRegular: {
            readonly fontWeight: 400;
            readonly fontSize: "0.6875rem";
            readonly letterSpacing: "0";
            readonly lineHeight: 1;
            readonly WebkitFontSmoothing: "auto !important";
            readonly fontFamily: string;
        };
        readonly extraSmallMedium: {
            readonly fontWeight: 500;
            readonly fontSize: "0.6875rem";
            readonly letterSpacing: "0";
            readonly lineHeight: 1.1;
            readonly WebkitFontSmoothing: "auto !important";
            readonly fontFamily: string;
        };
        readonly smallRegular: {
            readonly fontWeight: 400;
            readonly fontSize: "0.8125rem";
            readonly lineHeight: 1.25;
            readonly WebkitFontSmoothing: "auto !important";
            readonly fontFamily: string;
        };
        readonly smallMedium: {
            readonly fontWeight: 500;
            readonly lineHeight: 1.375;
            readonly fontSize: "0.8125rem";
            readonly WebkitFontSmoothing: "auto !important";
            readonly fontFamily: string;
        };
        readonly smallBold: {
            readonly fontWeight: 600;
            readonly lineHeight: 1.375;
            readonly fontSize: "0.8125rem";
            readonly WebkitFontSmoothing: "auto !important";
            readonly fontFamily: string;
        };
        readonly regularRegular: {
            readonly fontWeight: 400;
            readonly fontSize: "0.875rem";
            readonly lineHeight: 1.25;
            readonly WebkitFontSmoothing: "auto !important";
            readonly fontFamily: string;
        };
        readonly regularMedium: {
            readonly fontWeight: 500;
            readonly fontSize: "0.875rem";
            readonly lineHeight: 1.25;
            readonly WebkitFontSmoothing: "auto !important";
            readonly fontFamily: string;
        };
        readonly largeMedium: {
            fontWeight: 500;
            fontSize: "1rem";
            lineHeight: 2;
            WebkitFontSmoothing: "auto !important";
            fontFamily: string;
        };
        readonly largeBold: {
            readonly fontWeight: 600;
            readonly fontSize: "1rem";
            readonly lineHeight: 2;
            readonly WebkitFontSmoothing: "auto !important";
            readonly fontFamily: string;
        };
        readonly xlargeMedium: {
            readonly fontSize: "1.25rem";
            readonly fontWeight: 600;
            readonly lineHeight: 2;
            readonly WebkitFontSmoothing: "auto !important";
            readonly fontFamily: string;
        };
        readonly xxlargeMedium: {
            readonly fontSize: "2rem";
            readonly fontWeight: 600;
            readonly lineHeight: 2;
            readonly WebkitFontSmoothing: "auto !important";
            readonly fontFamily: string;
        };
    };
    fontSizeVariants: (t: InternalTheme) => {
        readonly xss: {
            readonly fontSize: "0.6875rem";
        };
        readonly xs: {
            readonly fontSize: "0.8125rem";
        };
        readonly sm: {
            readonly fontSize: "0.875rem";
        };
    };
    borderVariants: (t: InternalTheme, props?: any) => {
        readonly normal: {
            readonly borderColor: "hsla(0, 0%, 0%, 0.16)" | "#F04438";
            readonly borderRadius: "0.375rem";
            readonly border: "1px solid";
        };
    };
    focusRing: (t: InternalTheme) => {
        readonly '&:focus': {
            readonly '&::-moz-focus-inner': {
                readonly border: "0";
            };
            readonly WebkitTapHighlightColor: "transparent";
            readonly boxShadow: string;
            readonly transitionProperty: "background-color,border-color,color,fill,stroke,opacity,box-shadow,transform";
            readonly transitionTimingFunction: "ease";
            readonly transitionDuration: "200ms";
        };
    };
    focusRingInput: (t: InternalTheme, props?: any) => {
        readonly '&:focus': {
            readonly WebkitTapHighlightColor: "transparent";
            readonly boxShadow: string;
            readonly transitionProperty: "background-color,border-color,color,fill,stroke,opacity,box-shadow,transform";
            readonly transitionTimingFunction: "ease";
            readonly transitionDuration: "200ms";
        };
    };
    disabled: (t: InternalTheme) => {
        readonly '&:disabled,&[data-disabled]': {
            readonly cursor: "not-allowed";
            readonly pointerEvents: "none";
            readonly opacity: "50%";
        };
    };
    borderColor: (t: InternalTheme, props?: any) => {
        readonly borderColor: "hsla(0, 0%, 0%, 0.16)" | "#F04438";
    };
    centeredFlex: (display?: 'flex' | 'inline-flex') => {
        display: "flex" | "inline-flex";
        justifyContent: string;
        alignItems: string;
    };
    maxHeightScroller: (t: InternalTheme) => {
        readonly '::-webkit-scrollbar': {
            background: string;
            width: string;
            height: string;
        };
        readonly '::-webkit-scrollbar-thumb': {
            background: "hsla(0, 0%, 0%, 0.36)";
        };
        readonly '::-webkit-scrollbar-track': {
            background: string;
        };
        readonly height: "100%";
        readonly overflowY: "auto";
    };
    unstyledScrollbar: (t: InternalTheme) => {
        '::-webkit-scrollbar': {
            background: string;
            width: string;
            height: string;
        };
        '::-webkit-scrollbar-thumb': {
            background: "hsla(0, 0%, 0%, 0.36)";
        };
        '::-webkit-scrollbar-track': {
            background: string;
        };
    };
};
