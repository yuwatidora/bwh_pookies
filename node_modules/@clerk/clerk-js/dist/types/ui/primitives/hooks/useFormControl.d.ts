import type { ClerkAPIError } from '@clerk/types';
import React from 'react';
export type FormControlProps = {
    /**
     * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).
     * - The form element (e.g. Input) gets the `id`
     */
    id: string;
    isRequired?: boolean;
    hasError?: boolean;
    isDisabled?: boolean;
    setError: (error: string | ClerkAPIError | undefined) => void;
    setSuccess: (message: string) => void;
    setWarning: (warning: string) => void;
    setInfo: (info: string) => void;
    setHasPassedComplexity: (b: boolean) => void;
    clearFeedback: () => void;
};
type FormControlContextValue = Required<FormControlProps> & {
    errorMessageId: string;
};
export declare const FormControlContext: React.Context<{
    value: FormControlContextValue;
} | undefined>, useFormControl: () => FormControlContextValue | Partial<FormControlContextValue>;
export declare const FormControlContextProvider: (props: React.PropsWithChildren<FormControlProps>) => import("@emotion/react/jsx-runtime").JSX.Element;
export {};
