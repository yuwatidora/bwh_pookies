import type { CheckAuthorization, MembershipRole, OrganizationPermissionKey } from '@clerk/types';
import type { ComponentType, PropsWithChildren, ReactNode } from 'react';
import React from 'react';
type GateParams = Parameters<CheckAuthorization>[0] | ((has: CheckAuthorization) => boolean);
type GateProps = PropsWithChildren<({
    condition?: never;
    role: MembershipRole;
    permission?: never;
} | {
    condition?: never;
    role?: never;
    permission: OrganizationPermissionKey;
} | {
    condition: (has: CheckAuthorization) => boolean;
    role?: never;
    permission?: never;
}) & {
    fallback?: ReactNode;
    redirectTo?: string;
}>;
export declare const useGate: (params: GateParams) => {
    isAuthorizedUser: boolean;
};
export declare const Gate: (gateProps: GateProps) => import("@emotion/react/jsx-runtime").JSX.Element | null;
export declare function withGate<P>(Component: ComponentType<P>, gateProps: GateProps): React.ComponentType<P>;
export {};
