import type { SelectId } from '@clerk/types';
import type { PropsWithChildren, ReactElement } from 'react';
import { Button, Flex, Text } from '../customizables';
import type { PropsOfComponent, ThemableCssProp } from '../styledSystem';
type Option = {
    value: string | null;
    label?: string;
};
type OptionBuilder<O extends Option> = (option: O, index?: number, isFocused?: boolean) => JSX.Element;
type SelectProps<O extends Option> = {
    options: O[];
    value: string | null;
    onChange: (option: O) => void;
    searchPlaceholder?: string;
    placeholder?: string;
    comparator?: (term: string, option: O) => boolean;
    noResultsMessage?: string;
    optionBuilder?: OptionBuilder<O>;
    elementId?: SelectId;
};
export declare const Select: <O extends Option>(props: PropsWithChildren<SelectProps<O>>) => ReactElement;
export declare const SelectNoResults: (props: PropsOfComponent<typeof Text>) => import("@emotion/react/jsx-runtime").JSX.Element;
type SelectOptionListProps = PropsOfComponent<typeof Flex> & {
    containerSx?: ThemableCssProp;
};
export declare const SelectOptionList: (props: SelectOptionListProps) => import("@emotion/react/jsx-runtime").JSX.Element;
export declare const SelectButton: (props: PropsOfComponent<typeof Button>) => import("@emotion/react/jsx-runtime").JSX.Element;
export {};
