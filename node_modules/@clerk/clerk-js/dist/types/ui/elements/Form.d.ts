import type { FieldId } from '@clerk/types';
import React from 'react';
import { Button, Flex, Form as FormPrim } from '../customizables';
import type { PropsOfComponent } from '../styledSystem';
declare const useFormState: () => {
    isLoading: boolean;
    isDisabled: boolean;
    submittedWithEnter: boolean;
};
type FormProps = PropsOfComponent<typeof FormPrim>;
export declare const Form: {
    Root: (props: FormProps) => JSX.Element;
    ControlRow: (props: Omit<PropsOfComponent<typeof Flex>, 'elementId'> & {
        elementId?: FieldId;
    }) => import("@emotion/react/jsx-runtime").JSX.Element;
    Control: React.ForwardRefExoticComponent<Omit<React.PropsWithChildren<Omit<Omit<React.ClassAttributes<HTMLInputElement> & React.InputHTMLAttributes<HTMLInputElement> & {
        css?: import("../styledSystem/types").ThemableCssProp;
    } & {} & {
        isDisabled?: boolean | undefined;
        hasError?: boolean | undefined;
        focusRing?: boolean | undefined;
        isSuccessful?: boolean | undefined;
    } & Partial<Record<"isRequired", boolean>>, "ref"> & React.RefAttributes<HTMLInputElement> & {
        elementDescriptor?: import("../customizables/elementDescriptors").ElementDescriptor | (import("../customizables/elementDescriptors").ElementDescriptor | undefined)[] | undefined;
        elementId?: import("../customizables/elementDescriptors").ElementId | undefined;
        css?: undefined;
        sx?: import("../styledSystem/types").ThemableCssProp;
    }, "label" | "placeholder"> & {
        id: FieldId;
        isRequired?: boolean | undefined;
        isOptional?: boolean | undefined;
        onActionClicked?: React.MouseEventHandler<Element> | undefined;
        isDisabled?: boolean | undefined;
        label?: string | import("../customizables").LocalizationKey | undefined;
        placeholder?: string | import("../customizables").LocalizationKey | undefined;
        actionLabel?: string | import("../customizables").LocalizationKey | undefined;
        icon?: React.ComponentType<{}> | undefined;
        validatePassword?: boolean | undefined;
        setError: (error: string | import("@clerk/types").ClerkAPIError | undefined) => void;
        setWarning: (warning: string) => void;
        setInfo: (info: string) => void;
        setSuccess: (message: string) => void;
        feedback: string;
        feedbackType: import("../utils").FeedbackType;
        setHasPassedComplexity: (b: boolean) => void;
        clearFeedback: () => void;
        hasPassedComplexity: boolean;
        infoText?: string | import("../customizables").LocalizationKey | undefined;
        radioOptions?: {
            value: string;
            label: string | import("../customizables").LocalizationKey;
            description?: string | import("../customizables").LocalizationKey | undefined;
        }[] | undefined;
        groupPreffix?: string | undefined;
        groupSuffix?: string | undefined;
    }>, "ref"> & React.RefAttributes<HTMLInputElement>>;
    SubmitButton: (props: PropsOfComponent<typeof Button>) => import("@emotion/react/jsx-runtime").JSX.Element;
    ResetButton: (props: PropsOfComponent<typeof Button>) => import("@emotion/react/jsx-runtime").JSX.Element;
};
export { useFormState };
