import type { ClerkAPIError, ClerkRuntimeError } from '@clerk/types';
import React from 'react';
type Metadata = string | undefined;
declare const CardStateProvider: (props: React.PropsWithChildren<any>) => import("@emotion/react/jsx-runtime").JSX.Element;
declare const useCardState: () => {
    setIdle: (metadata?: Metadata) => void;
    setError: (metadata: ClerkRuntimeError | ClerkAPIError | Metadata | string) => void;
    setLoading: (metadata?: Metadata) => void;
    runAsync: <T = unknown>(cb: Promise<T> | (() => Promise<T>), metadata?: Metadata) => Promise<T>;
    loadingMetadata: Metadata;
    error: string | undefined;
    isLoading: boolean;
    isIdle: boolean;
};
export { useCardState, CardStateProvider };
export declare const withCardStateProvider: <T>(Component: React.ComponentType<T>) => (props: T) => import("@emotion/react/jsx-runtime").JSX.Element;
