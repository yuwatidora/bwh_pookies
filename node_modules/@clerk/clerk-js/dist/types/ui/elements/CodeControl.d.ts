import React from 'react';
import type { FormControlState } from '../utils';
type UseCodeInputOptions = {
    length?: number;
};
type onCodeEntryFinishedCallback = (code: string) => unknown;
type onCodeEntryFinished = (cb: onCodeEntryFinishedCallback) => void;
type UseCodeControlReturn = ReturnType<typeof useCodeControl>;
export declare const useCodeControl: (formControl: FormControlState, options?: UseCodeInputOptions) => {
    otpInputProps: {
        length: number;
        values: string[];
        setValues: React.Dispatch<React.SetStateAction<string[]>>;
        feedback: string;
        feedbackType: import("../utils").FeedbackType;
        ref: React.MutableRefObject<any>;
    };
    onCodeEntryFinished: onCodeEntryFinished;
    reset: () => any;
};
type CodeControlProps = UseCodeControlReturn['otpInputProps'] & {
    isDisabled?: boolean;
    errorText?: string;
    isSuccessfullyFilled?: boolean;
    isLoading?: boolean;
};
export declare const CodeControl: React.ForwardRefExoticComponent<Omit<CodeControlProps, "ref"> & React.RefAttributes<{
    reset: any;
}>>;
export {};
