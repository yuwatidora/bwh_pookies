import type { ClerkAPIError, FieldId } from '@clerk/types';
import type { PropsWithChildren } from 'react';
import React from 'react';
import type { LocalizationKey } from '../customizables';
import { Input } from '../customizables';
import type { ElementDescriptor } from '../customizables/elementDescriptors';
import type { PropsOfComponent } from '../styledSystem';
import type { FeedbackType } from '../utils';
import { useFormControlFeedback } from '../utils';
type FormControlProps = Omit<PropsOfComponent<typeof Input>, 'label' | 'placeholder'> & {
    id: FieldId;
    isRequired?: boolean;
    isOptional?: boolean;
    onActionClicked?: React.MouseEventHandler;
    isDisabled?: boolean;
    label?: string | LocalizationKey;
    placeholder?: string | LocalizationKey;
    actionLabel?: string | LocalizationKey;
    icon?: React.ComponentType;
    validatePassword?: boolean;
    setError: (error: string | ClerkAPIError | undefined) => void;
    setWarning: (warning: string) => void;
    setInfo: (info: string) => void;
    setSuccess: (message: string) => void;
    feedback: string;
    feedbackType: FeedbackType;
    setHasPassedComplexity: (b: boolean) => void;
    clearFeedback: () => void;
    hasPassedComplexity: boolean;
    infoText?: string | LocalizationKey;
    radioOptions?: {
        value: string;
        label: string | LocalizationKey;
        description?: string | LocalizationKey;
    }[];
    groupPreffix?: string;
    groupSuffix?: string;
};
type FormFeedbackDescriptorsKeys = 'error' | 'warning' | 'info' | 'success';
type FormFeedbackProps = Partial<ReturnType<typeof useFormControlFeedback>['debounced'] & {
    id: FieldId;
}> & {
    elementDescriptors?: Partial<Record<FormFeedbackDescriptorsKeys, ElementDescriptor>>;
};
export declare const FormFeedback: (props: FormFeedbackProps) => import("@emotion/react/jsx-runtime").JSX.Element;
export declare const FormControl: React.ForwardRefExoticComponent<Omit<PropsWithChildren<FormControlProps>, "ref"> & React.RefAttributes<HTMLInputElement>>;
export {};
