import type { ActJWTClaim, CheckAuthorization, GetToken, SessionJSON, SessionResource, SessionStatus, TokenResource, UserResource } from '@clerk/types';
import { PublicUserData } from './internal';
import { BaseResource } from './internal';
export declare class Session extends BaseResource implements SessionResource {
    #private;
    pathRoot: string;
    id: string;
    status: SessionStatus;
    lastActiveAt: Date;
    lastActiveToken: TokenResource | null;
    lastActiveOrganizationId: string | null;
    actor: ActJWTClaim | null;
    user: UserResource | null;
    publicUserData: PublicUserData;
    expireAt: Date;
    abandonAt: Date;
    createdAt: Date;
    updatedAt: Date;
    static isSessionResource(resource: unknown): resource is Session;
    constructor(data: SessionJSON);
    end: () => Promise<SessionResource>;
    remove: () => Promise<SessionResource>;
    touch: () => Promise<SessionResource>;
    clearCache: () => void;
    getToken: GetToken;
    checkAuthorization: CheckAuthorization;
    protected fromJSON(data: SessionJSON | null): this;
    private _getToken;
}
