import type { ActiveSessionResource, AuthenticateWithMetamaskParams, BeforeEmitCallback, BuildUrlWithAuthParams, Clerk as ClerkInterface, ClerkAPIError, ClerkOptions, ClientResource, CreateOrganizationParams, CreateOrganizationProps, DomainOrProxyUrl, EnvironmentJSON, EnvironmentResource, HandleEmailLinkVerificationParams, HandleMagicLinkVerificationParams, HandleOAuthCallbackParams, InstanceType, ListenerCallback, OrganizationInvitationResource, OrganizationListProps, OrganizationMembershipResource, OrganizationProfileProps, OrganizationResource, OrganizationSwitcherProps, SDKMetadata, SetActiveParams, SignInProps, SignInRedirectOptions, SignOut, SignUpProps, SignUpRedirectOptions, UnsubscribeCallback, UserButtonProps, UserProfileProps, UserResource } from '@clerk/types';
import type { MountComponentRenderer } from '../ui/Components';
import type { FapiClient, FapiRequestCallback } from './fapiClient';
import { OrganizationMembership } from './resources/internal';
export type ClerkCoreBroadcastChannelEvent = {
    type: 'signout';
};
declare global {
    interface Window {
        Clerk?: Clerk;
        __clerk_frontend_api?: string;
        __clerk_publishable_key?: string;
        __clerk_proxy_url?: ClerkInterface['proxyUrl'];
        __clerk_domain?: ClerkInterface['domain'];
    }
}
export default class Clerk implements ClerkInterface {
    #private;
    static mountComponentRenderer?: MountComponentRenderer;
    static version: string;
    static sdkMetadata: SDKMetadata;
    client: ClientResource | undefined;
    session: ActiveSessionResource | null | undefined;
    organization: OrganizationResource | null | undefined;
    user: UserResource | null | undefined;
    __internal_country?: string | null;
    readonly frontendApi: string;
    readonly publishableKey: string | undefined;
    protected internal_last_error: ClerkAPIError | null;
    get version(): string;
    set sdkMetadata(metadata: SDKMetadata);
    get sdkMetadata(): SDKMetadata;
    get loaded(): boolean;
    get isSatellite(): boolean;
    get domain(): string;
    get proxyUrl(): string;
    get instanceType(): InstanceType;
    get isStandardBrowser(): boolean;
    /**
     * @deprecated This getter is no longer used internally and will be dropped in the next major version
     */
    get experimental_canUseCaptcha(): boolean | undefined;
    /**
     * @deprecated This getter is no longer used internally and will be dropped in the next major version
     */
    get experimental_captchaSiteKey(): string | null;
    /**
     * @deprecated This getter is no longer used internally and will be dropped in the next major version
     */
    get experimental_captchaURL(): string | null;
    constructor(key: string, options?: DomainOrProxyUrl);
    getFapiClient: () => FapiClient;
    isReady: () => boolean;
    load: (options?: ClerkOptions) => Promise<void>;
    signOut: SignOut;
    openSignIn: (props?: SignInProps) => void;
    closeSignIn: () => void;
    openSignUp: (props?: SignUpProps) => void;
    closeSignUp: () => void;
    openUserProfile: (props?: UserProfileProps) => void;
    closeUserProfile: () => void;
    openOrganizationProfile: (props?: OrganizationProfileProps) => void;
    closeOrganizationProfile: () => void;
    openCreateOrganization: (props?: CreateOrganizationProps) => void;
    closeCreateOrganization: () => void;
    mountSignIn: (node: HTMLDivElement, props?: SignInProps) => void;
    unmountSignIn: (node: HTMLDivElement) => void;
    mountSignUp: (node: HTMLDivElement, props?: SignUpProps) => void;
    unmountSignUp: (node: HTMLDivElement) => void;
    mountUserProfile: (node: HTMLDivElement, props?: UserProfileProps) => void;
    unmountUserProfile: (node: HTMLDivElement) => void;
    mountOrganizationProfile: (node: HTMLDivElement, props?: OrganizationProfileProps) => void;
    unmountOrganizationProfile: (node: HTMLDivElement) => void;
    mountCreateOrganization: (node: HTMLDivElement, props?: CreateOrganizationProps) => void;
    unmountCreateOrganization: (node: HTMLDivElement) => void;
    mountOrganizationSwitcher: (node: HTMLDivElement, props?: OrganizationSwitcherProps) => void;
    unmountOrganizationSwitcher: (node: HTMLDivElement) => void;
    mountOrganizationList: (node: HTMLDivElement, props?: OrganizationListProps) => void;
    unmountOrganizationList: (node: HTMLDivElement) => void;
    mountUserButton: (node: HTMLDivElement, props?: UserButtonProps) => void;
    unmountUserButton: (node: HTMLDivElement) => void;
    /**
     * `setActive` can be used to set the active session and/or organization.
     */
    setActive: ({ session, organization, beforeEmit }: SetActiveParams) => Promise<void>;
    /**
     * @deprecated  Use `setActive` instead.
     */
    setSession: (session: ActiveSessionResource | string | null, beforeEmit?: BeforeEmitCallback) => Promise<void>;
    addListener: (listener: ListenerCallback) => UnsubscribeCallback;
    navigate: (to: string | undefined) => Promise<unknown>;
    buildUrlWithAuth(to: string, options?: BuildUrlWithAuthParams): string;
    buildSignInUrl(options?: SignInRedirectOptions): string;
    buildSignUpUrl(options?: SignUpRedirectOptions): string;
    buildUserProfileUrl(): string;
    buildHomeUrl(): string;
    buildCreateOrganizationUrl(): string;
    buildOrganizationProfileUrl(): string;
    redirectWithAuth: (to: string) => Promise<unknown>;
    redirectToSignIn: (options?: SignInRedirectOptions) => Promise<unknown>;
    redirectToSignUp: (options?: SignUpRedirectOptions) => Promise<unknown>;
    redirectToUserProfile: () => Promise<unknown>;
    redirectToCreateOrganization: () => Promise<unknown>;
    redirectToOrganizationProfile: () => Promise<unknown>;
    redirectToHome: () => Promise<unknown>;
    /**
     *
     * @deprecated Use `handleEmailLinkVerification` instead.
     */
    handleMagicLinkVerification: (params: HandleMagicLinkVerificationParams, customNavigate?: ((to: string) => Promise<unknown>) | undefined) => Promise<unknown>;
    handleEmailLinkVerification: (params: HandleEmailLinkVerificationParams, customNavigate?: ((to: string) => Promise<unknown>) | undefined) => Promise<unknown>;
    handleRedirectCallback: (params?: HandleOAuthCallbackParams, customNavigate?: ((to: string) => Promise<unknown>) | undefined) => Promise<unknown>;
    handleUnauthenticated: (opts?: {
        broadcast: boolean;
    }) => Promise<unknown>;
    authenticateWithMetamask: ({ redirectUrl, signUpContinueUrl, customNavigate, unsafeMetadata, }?: AuthenticateWithMetamaskParams) => Promise<void>;
    createOrganization: ({ name, slug }: CreateOrganizationParams) => Promise<OrganizationResource>;
    /**
     * @deprecated use User.getOrganizationMemberships
     */
    getOrganizationMemberships: () => Promise<OrganizationMembership[]>;
    getOrganization: (organizationId: string) => Promise<OrganizationResource>;
    updateEnvironment(environment: EnvironmentResource): void;
    __internal_setCountry: (country: string | null) => void;
    get __internal_last_error(): ClerkAPIError | null;
    set __internal_last_error(value: ClerkAPIError | null);
    updateClient: (newClient: ClientResource) => void;
    /**
     * @deprecated This method will be dropped in the next major release.
     * This method is only used in another deprecated part: `invitationList` from useOrganization
     */
    __unstable__invitationUpdate(invitation: OrganizationInvitationResource): void;
    /**
     * @deprecated This method will be dropped in the next major release.
     * This method is only used in another deprecated part: `membershipList` from useOrganization
     */
    __unstable__membershipUpdate(membership: OrganizationMembershipResource): void;
    get __unstable__environment(): EnvironmentResource | null | undefined;
    __unstable__setEnvironment: (env: EnvironmentJSON) => Promise<void>;
    __unstable__onBeforeRequest: (callback: FapiRequestCallback<any>) => void;
    __unstable__onAfterResponse: (callback: FapiRequestCallback<any>) => void;
    __unstable__updateProps: (props: any) => Promise<void> | undefined;
    __internal_navigateWithError(to: string, err: ClerkAPIError): Promise<unknown>;
    __internal_getFrameworkHint(): {
        framework: string | undefined;
        version: string | undefined;
    };
    assertComponentsReady(controls: unknown): asserts controls is ReturnType<MountComponentRenderer>;
}
