{"version":3,"sources":["../src/useOAuth.ts"],"sourcesContent":["import { useSignIn, useSignUp } from '@clerk/clerk-react';\nimport type { OAuthStrategy, SetActive, SignInResource, SignUpResource } from '@clerk/types';\nimport * as AuthSession from 'expo-auth-session';\nimport * as WebBrowser from 'expo-web-browser';\n\nexport type UseOAuthFlowParams = {\n  strategy: OAuthStrategy;\n  redirectUrl?: string;\n  unsafeMetadata?: SignUpUnsafeMetadata;\n};\n\nexport type StartOAuthFlowParams = {\n  redirectUrl?: string;\n  unsafeMetadata?: SignUpUnsafeMetadata;\n};\n\nexport type StartOAuthFlowReturnType = {\n  createdSessionId: string;\n  setActive?: SetActive;\n  signIn?: SignInResource;\n  signUp?: SignUpResource;\n  authSessionResult?: WebBrowser.WebBrowserAuthSessionResult;\n};\n\nexport function useOAuth(useOAuthParams: UseOAuthFlowParams) {\n  const { strategy } = useOAuthParams || {};\n  if (!strategy) {\n    throw new Error('Missing oauth strategy');\n  }\n\n  const { signIn, setActive, isLoaded: isSignInLoaded } = useSignIn();\n  const { signUp, isLoaded: isSignUpLoaded } = useSignUp();\n\n  async function startOAuthFlow(startOAuthFlowParams?: StartOAuthFlowParams): Promise<StartOAuthFlowReturnType> {\n    if (!isSignInLoaded || !isSignUpLoaded) {\n      return {\n        createdSessionId: '',\n        signIn,\n        signUp,\n        setActive,\n      };\n    }\n\n    // Create a redirect url for the current platform and environment.\n    //\n    // This redirect URL needs to be whitelisted for your Clerk production instance via\n    // https://clerk.dev/docs/reference/backend-api/tag/Redirect-URLs#operation/CreateRedirectURL\n    //\n    // For more information go to:\n    // https://docs.expo.dev/versions/latest/sdk/auth-session/#authsessionmakeredirecturi\n    const oauthRedirectUrl =\n      startOAuthFlowParams?.redirectUrl ||\n      useOAuthParams.redirectUrl ||\n      AuthSession.makeRedirectUri({\n        path: 'oauth-native-callback',\n      });\n\n    await signIn.create({ strategy, redirectUrl: oauthRedirectUrl });\n\n    const { externalVerificationRedirectURL } = signIn.firstFactorVerification;\n\n    const authSessionResult = await WebBrowser.openAuthSessionAsync(\n      // @ts-ignore\n      externalVerificationRedirectURL.toString(),\n      oauthRedirectUrl,\n    );\n\n    // @ts-expect-error\n    const { type, url } = authSessionResult || {};\n\n    // TODO: Check all the possible AuthSession results\n    // https://docs.expo.dev/versions/latest/sdk/auth-session/#returns-7\n    if (type !== 'success') {\n      return {\n        authSessionResult,\n        createdSessionId: '',\n        setActive,\n        signIn,\n        signUp,\n      };\n    }\n\n    const params = new URL(url).searchParams;\n\n    const rotatingTokenNonce = params.get('rotating_token_nonce') || '';\n    await signIn.reload({ rotatingTokenNonce });\n\n    const { status, firstFactorVerification } = signIn;\n\n    let createdSessionId = '';\n\n    if (status === 'complete') {\n      createdSessionId = signIn.createdSessionId!;\n    } else if (firstFactorVerification.status === 'transferable') {\n      await signUp.create({\n        transfer: true,\n        unsafeMetadata: startOAuthFlowParams?.unsafeMetadata || useOAuthParams.unsafeMetadata,\n      });\n      createdSessionId = signUp.createdSessionId || '';\n    }\n\n    return {\n      authSessionResult,\n      createdSessionId,\n      setActive,\n      signIn,\n      signUp,\n    };\n  }\n\n  return {\n    startOAuthFlow,\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAqC;AAErC,kBAA6B;AAC7B,iBAA4B;AAqBrB,SAAS,SAAS,gBAAoC;AAC3D,QAAM,EAAE,SAAS,IAAI,kBAAkB,CAAC;AACxC,MAAI,CAAC,UAAU;AACb,UAAM,IAAI,MAAM,wBAAwB;AAAA,EAC1C;AAEA,QAAM,EAAE,QAAQ,WAAW,UAAU,eAAe,QAAI,8BAAU;AAClE,QAAM,EAAE,QAAQ,UAAU,eAAe,QAAI,8BAAU;AAEvD,iBAAe,eAAe,sBAAgF;AAC5G,QAAI,CAAC,kBAAkB,CAAC,gBAAgB;AACtC,aAAO;AAAA,QACL,kBAAkB;AAAA,QAClB;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AASA,UAAM,oBACJ,6DAAsB,gBACtB,eAAe,eACf,YAAY,gBAAgB;AAAA,MAC1B,MAAM;AAAA,IACR,CAAC;AAEH,UAAM,OAAO,OAAO,EAAE,UAAU,aAAa,iBAAiB,CAAC;AAE/D,UAAM,EAAE,gCAAgC,IAAI,OAAO;AAEnD,UAAM,oBAAoB,MAAM,WAAW;AAAA;AAAA,MAEzC,gCAAgC,SAAS;AAAA,MACzC;AAAA,IACF;AAGA,UAAM,EAAE,MAAM,IAAI,IAAI,qBAAqB,CAAC;AAI5C,QAAI,SAAS,WAAW;AACtB,aAAO;AAAA,QACL;AAAA,QACA,kBAAkB;AAAA,QAClB;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,UAAM,SAAS,IAAI,IAAI,GAAG,EAAE;AAE5B,UAAM,qBAAqB,OAAO,IAAI,sBAAsB,KAAK;AACjE,UAAM,OAAO,OAAO,EAAE,mBAAmB,CAAC;AAE1C,UAAM,EAAE,QAAQ,wBAAwB,IAAI;AAE5C,QAAI,mBAAmB;AAEvB,QAAI,WAAW,YAAY;AACzB,yBAAmB,OAAO;AAAA,IAC5B,WAAW,wBAAwB,WAAW,gBAAgB;AAC5D,YAAM,OAAO,OAAO;AAAA,QAClB,UAAU;AAAA,QACV,iBAAgB,6DAAsB,mBAAkB,eAAe;AAAA,MACzE,CAAC;AACD,yBAAmB,OAAO,oBAAoB;AAAA,IAChD;AAEA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AAAA,IACL;AAAA,EACF;AACF;","names":[]}