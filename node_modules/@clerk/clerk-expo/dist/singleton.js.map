{"version":3,"sources":["../src/singleton.ts"],"sourcesContent":["import type { FapiRequestInit, FapiResponse } from '@clerk/clerk-js/dist/types/core/fapiClient';\nimport Clerk from '@clerk/clerk-js/headless';\nimport type { HeadlessBrowserClerk } from '@clerk/clerk-react';\nimport * as Application from 'expo-application';\nimport Constants from 'expo-constants';\n\nimport type { TokenCache } from './cache';\n\nClerk.sdkMetadata = {\n  name: PACKAGE_NAME,\n  version: PACKAGE_VERSION,\n};\n\nconst KEY = '__clerk_client_jwt';\n\nexport let clerk: HeadlessBrowserClerk;\n\ntype BuildClerkOptions = {\n  key: string;\n  tokenCache: TokenCache;\n};\n\nexport function buildClerk({ key, tokenCache }: BuildClerkOptions): HeadlessBrowserClerk {\n  // Support \"hot-swapping\" the Clerk instance at runtime. See JS-598 for additional details.\n  const hasKeyChanged = clerk && key !== clerk.publishableKey;\n\n  if (!clerk || hasKeyChanged) {\n    if (hasKeyChanged) {\n      tokenCache.clearToken?.(KEY);\n    }\n\n    const getToken = tokenCache.getToken;\n    const saveToken = tokenCache.saveToken;\n    // TODO: DO NOT ACCEPT THIS\n    clerk = new Clerk(key);\n\n    // @ts-expect-error\n    clerk.__unstable__onBeforeRequest(async (requestInit: FapiRequestInit) => {\n      // https://reactnative.dev/docs/0.61/network#known-issues-with-fetch-and-cookie-based-authentication\n      requestInit.credentials = 'omit';\n\n      requestInit.url?.searchParams.append('_is_native', '1');\n\n      const jwt = await getToken(KEY);\n      (requestInit.headers as Headers).set('authorization', jwt || '');\n\n      // Send some non-identifying headers that are useful for logging\n      (requestInit.headers as Headers).set('x-expo-execution-environment', Constants.executionEnvironment);\n      (requestInit.headers as Headers).set(\n        'x-expo-native-application-version',\n        Application.nativeApplicationVersion || 'NULL',\n      );\n    });\n\n    // @ts-expect-error\n    clerk.__unstable__onAfterResponse(async (_: FapiRequestInit, response: FapiResponse<unknown>) => {\n      const authHeader = response.headers.get('authorization');\n      if (authHeader) {\n        await saveToken(KEY, authHeader);\n      }\n    });\n  }\n\n  return clerk;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,sBAAkB;AAElB,kBAA6B;AAC7B,4BAAsB;AAItB,gBAAAA,QAAM,cAAc;AAAA,EAClB,MAAM;AAAA,EACN,SAAS;AACX;AAEA,MAAM,MAAM;AAEL,IAAI;AAOJ,SAAS,WAAW,EAAE,KAAK,WAAW,GAA4C;AAtBzF;AAwBE,QAAM,gBAAgB,SAAS,QAAQ,MAAM;AAE7C,MAAI,CAAC,SAAS,eAAe;AAC3B,QAAI,eAAe;AACjB,uBAAW,eAAX,oCAAwB;AAAA,IAC1B;AAEA,UAAM,WAAW,WAAW;AAC5B,UAAM,YAAY,WAAW;AAE7B,YAAQ,IAAI,gBAAAA,QAAM,GAAG;AAGrB,UAAM,4BAA4B,OAAO,gBAAiC;AArC9E,UAAAC;AAuCM,kBAAY,cAAc;AAE1B,OAAAA,MAAA,YAAY,QAAZ,gBAAAA,IAAiB,aAAa,OAAO,cAAc;AAEnD,YAAM,MAAM,MAAM,SAAS,GAAG;AAC9B,MAAC,YAAY,QAAoB,IAAI,iBAAiB,OAAO,EAAE;AAG/D,MAAC,YAAY,QAAoB,IAAI,gCAAgC,sBAAAC,QAAU,oBAAoB;AACnG,MAAC,YAAY,QAAoB;AAAA,QAC/B;AAAA,QACA,YAAY,4BAA4B;AAAA,MAC1C;AAAA,IACF,CAAC;AAGD,UAAM,4BAA4B,OAAO,GAAoB,aAAoC;AAC/F,YAAM,aAAa,SAAS,QAAQ,IAAI,eAAe;AACvD,UAAI,YAAY;AACd,cAAM,UAAU,KAAK,UAAU;AAAA,MACjC;AAAA,IACF,CAAC;AAAA,EACH;AAEA,SAAO;AACT;","names":["Clerk","_a","Constants"]}