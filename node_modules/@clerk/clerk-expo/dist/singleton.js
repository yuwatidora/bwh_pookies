"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var singleton_exports = {};
__export(singleton_exports, {
  buildClerk: () => buildClerk,
  clerk: () => clerk
});
module.exports = __toCommonJS(singleton_exports);
var import_headless = __toESM(require("@clerk/clerk-js/headless"));
var Application = __toESM(require("expo-application"));
var import_expo_constants = __toESM(require("expo-constants"));
import_headless.default.sdkMetadata = {
  name: "@clerk/clerk-expo",
  version: "0.20.2"
};
const KEY = "__clerk_client_jwt";
let clerk;
function buildClerk({ key, tokenCache }) {
  var _a;
  const hasKeyChanged = clerk && key !== clerk.publishableKey;
  if (!clerk || hasKeyChanged) {
    if (hasKeyChanged) {
      (_a = tokenCache.clearToken) == null ? void 0 : _a.call(tokenCache, KEY);
    }
    const getToken = tokenCache.getToken;
    const saveToken = tokenCache.saveToken;
    clerk = new import_headless.default(key);
    clerk.__unstable__onBeforeRequest(async (requestInit) => {
      var _a2;
      requestInit.credentials = "omit";
      (_a2 = requestInit.url) == null ? void 0 : _a2.searchParams.append("_is_native", "1");
      const jwt = await getToken(KEY);
      requestInit.headers.set("authorization", jwt || "");
      requestInit.headers.set("x-expo-execution-environment", import_expo_constants.default.executionEnvironment);
      requestInit.headers.set(
        "x-expo-native-application-version",
        Application.nativeApplicationVersion || "NULL"
      );
    });
    clerk.__unstable__onAfterResponse(async (_, response) => {
      const authHeader = response.headers.get("authorization");
      if (authHeader) {
        await saveToken(KEY, authHeader);
      }
    });
  }
  return clerk;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  buildClerk,
  clerk
});
//# sourceMappingURL=singleton.js.map